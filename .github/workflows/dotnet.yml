name: .NET

on:
  push:
    branches: [ dev, main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ dev, main ]
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  # DOTNET_CLI_TELEMETRY_OPTOUT: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_NAME: "AddictedProxy"
  PROJECT_NAME_FRONTEND: "AddictedProxy-frontend"
  NODEJS: lts/*
  DOTNET: "9.0.x"
  sentry_project: "addictedproxy"
  SENTRY_ORG: "soundswitch"
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>

jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            ci:
             - '.github/**/*.yml'
            MainProject:
              - 'Addicted*/**'
              - 'Locking/**'
              - 'InversionOfControl/**'
              - 'Compressor/**'
              - 'TvMovieDatabaseClient/**'
            node:
              - 'package.json'
            nuxt:
              - 'addicted.nuxt/**'
      - name: Setup .NET
        uses: actions/setup-dotnet@v4.3.0
        if: steps.filter.outputs.MainProject == 'true' || steps.filter.outputs.ci == 'true' || github.ref == 'refs/heads/main'
        with:
          dotnet-version: ${{ env.DOTNET }}
      - name: Restore
        if: steps.filter.outputs.MainProject == 'true' || steps.filter.outputs.ci == 'true' || github.ref == 'refs/heads/main'
        run: dotnet restore --locked-mode
      - name: Build
        if: steps.filter.outputs.MainProject == 'true' || steps.filter.outputs.ci == 'true' || github.ref == 'refs/heads/main'
        run: dotnet build -c Release --no-restore ${{env.PROJECT_NAME}}/${{env.PROJECT_NAME}}.csproj
      - name: Test
        if: steps.filter.outputs.MainProject == 'true' || steps.filter.outputs.ci == 'true' || github.ref == 'refs/heads/main'
        run: dotnet test -c Release --no-restore  --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
      - name: Upload test results
        if: steps.filter.outputs.MainProject == 'true' || steps.filter.outputs.ci == 'true' || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-results-${{ matrix.dotnet-version }}
          path: TestResults-${{ matrix.dotnet-version }}
      - name: Install pnpm
        if: steps.filter.outputs.node == 'true'
        run: |
          npm i -g corepack@latest
          corepack enable
      - name: Use Node.js
        if: steps.filter.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'
      - name: Install dependencies
        if: steps.filter.outputs.node == 'true'
        run: pnpm install --frozen-lockfile
      - name: Release dry run
        if: steps.filter.outputs.node == 'true'
        run: pnpm run release-test

  main-release:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    name: "Prepare release"
    needs: [ build ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      repo-lowercase: ${{ steps.repo.outputs.lowercase }}
    steps:
      - name: Set repo lower case
        run: |
          echo "lowercase=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT
        id: repo
      - uses: actions/checkout@v4
      - name: Install pnpm
        run: |
          npm i -g corepack@latest
          corepack enable
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Release
        run: pnpm run release
      - name: Latest Version
        run: | 
          version=$(git describe --tags --abbrev=0 | cut -c 2-)
          echo "version=$version" >> $GITHUB_OUTPUT
        id: version
  sentry-release:
    name: "Setup Sentry Release"
    needs: [main-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.main-release.outputs.version}}
      - name: Sentry Release
        uses: getsentry/action-release@v1.10.4
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{env.SENTRY_ORG}}
          SENTRY_PROJECT: ${{env.sentry_project}}
        with:
          environment: Production
          version: "${{env.PROJECT_NAME}}@${{ needs.main-release.outputs.version}}"
  
  docker-build-publish:
    needs: [ main-release ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: "addictedproxy"
            image: ${{ needs.main-release.outputs.repo-lowercase}}
            context: "./"
            sentry_project: "addictedproxy"
          - package: "addictedproxy-frontend"
            image: ${{ needs.main-release.outputs.repo-lowercase}}-frontend
            context: "addicted.nuxt/"
            sentry_project: "addicted-frontend"
    permissions:
      contents: read
      packages: write
      # Both used for attesting the build provenance
      id-token: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4      
      
      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
      
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.REGISTRY }}/${{ matrix.image }}"
          tags: |
            type=semver,pattern={{version}},value=${{ needs.main-release.outputs.version}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image ${{ matrix.image }}
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: ${{ github.event_name != 'pull_request' }}
          annotations: ${{ steps.meta.outputs.annotations }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_ORG=${{env.SENTRY_ORG}}
            SENTRY_PROJECT=${{ matrix.sentry_project }}
            RELEASE_VERSION=${{ needs.main-release.outputs.version}}
      - name: Attest  ${{ matrix.image }}
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name:  "${{ env.REGISTRY }}/${{ matrix.image }}"
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true