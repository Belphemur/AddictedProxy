// <auto-generated />
using System;
using AddictedProxy.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AddictedProxy.Database.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20221126185539_AddInitialState")]
    partial class AddInitialState
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AddictedProxy.Database.Model.Credentials.AddictedUserCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cookie")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DownloadExceededDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DownloadUsage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUsage")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Usage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cookie")
                        .IsUnique();

                    b.ToTable("AddictedUserCredentials");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Episode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Discovered")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TvShowId", "Season", "Number")
                        .IsUnique();

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastRefreshed")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TvShowId", "Number")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Subtitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("CompletionPct")
                        .HasColumnType("double");

                    b.Property<bool>("Corrected")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Discovered")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("DownloadCount")
                        .HasColumnType("bigint");

                    b.Property<string>("DownloadUri")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long>("EpisodeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HD")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HearingImpaired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Scene")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StoragePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StoredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DownloadUri")
                        .IsUnique();

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.HasIndex("EpisodeId", "Language", "Version");

                    b.ToTable("Subtitles");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.TvShow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Discovered")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastSeasonRefreshed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8mb4_general_ci");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("TmdbId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Stats.ShowPopularity", b =>
                {
                    b.Property<long>("TvShowId")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastRequestedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("RequestedCount")
                        .HasColumnType("bigint");

                    b.HasKey("TvShowId", "Language");

                    b.ToTable("ShowPopularity");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Episode", b =>
                {
                    b.HasOne("AddictedProxy.Database.Model.Shows.TvShow", "TvShow")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Season", b =>
                {
                    b.HasOne("AddictedProxy.Database.Model.Shows.TvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Subtitle", b =>
                {
                    b.HasOne("AddictedProxy.Database.Model.Shows.Episode", "Episode")
                        .WithMany("Subtitles")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Stats.ShowPopularity", b =>
                {
                    b.HasOne("AddictedProxy.Database.Model.Shows.TvShow", "TvShow")
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.Episode", b =>
                {
                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("AddictedProxy.Database.Model.Shows.TvShow", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
